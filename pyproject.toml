[build-system]
requires = ["setuptools>=68"]
build-backend = "setuptools.build_meta"

[project]
name = "asr-conformer-smollm2"
dynamic = ["version"]
description = "Automatic Speech Recognition training pipeline combining Conformer encoder with SmolLM2 decoder"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "Alex Kroman", email = "alex@alexkroman.com"}
]
keywords = ["speech-recognition", "asr", "conformer", "smollm2", "transformers", "deep-learning"]
classifiers = [
    "Intended Audience :: Developers",
]

dependencies = [
    # Core ML frameworks - RunPod has torch pre-installed, we just need other packages
    # "torch" is provided by the system (2.8.0.dev with CUDA 12.8)
    # We'll use system Python instead of venv to avoid conflicts
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "datasets==3.6.0",  # Pin to match deploy script

    # Model components
    "peft>=0.6.0",

    # Evaluation and metrics
    "evaluate>=0.4.0",
    "jiwer>=3.0.0",  # For WER (Word Error Rate) calculation

    # Training utilities
    "tensorboard>=2.14.0",

    # Data processing
    "numpy>=1.24.0",
    "soundfile",
    "librosa",  # Required by datasets for audio decoding

    # Configuration management
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",

    # Performance
    "hf-transfer",  # For fast HuggingFace downloads
    "ninja",  # For faster CUDA kernel compilation
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

optimized = [
    "hf-transfer>=0.1.0",
]

cuda = [
    "bitsandbytes",  # For 8-bit optimizers on CUDA
]

[project.urls]
Homepage = "https://github.com/yourusername/asr-conformer-smollm2"
Documentation = "https://github.com/yourusername/asr-conformer-smollm2#readme"
Repository = "https://github.com/yourusername/asr-conformer-smollm2"
Issues = "https://github.com/yourusername/asr-conformer-smollm2/issues"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

# Code quality tools configuration
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true


[tool.ruff]
line-length = 100
target-version = "py38"
extend-exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]