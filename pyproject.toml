[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "asr-conformer-smollm2"
dynamic = ["version"]
description = "Automatic Speech Recognition training pipeline combining Conformer encoder with SmolLM2 decoder"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "Alex Kroman", email = "alex@alexkroman.com"}
]
keywords = ["speech-recognition", "asr", "conformer", "smollm2", "transformers", "deep-learning"]
classifiers = [
    "Intended Audience :: Developers",
]

dependencies = [
    # Core ML frameworks
    "torch>=2.0.0",
    "torchcodec",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "datasets>=2.14.0",

    # Model components
    "peft>=0.6.0",

    # Evaluation and metrics
    "evaluate>=0.4.0",

    # Training utilities
    "tensorboard>=2.14.0",

    # Data processing
    "numpy>=1.24.0",

    # Configuration management
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

optimized = [
    "hf-transfer>=0.1.0",
]

cuda = []

[project.urls]
Homepage = "https://github.com/yourusername/asr-conformer-smollm2"
Documentation = "https://github.com/yourusername/asr-conformer-smollm2#readme"
Repository = "https://github.com/yourusername/asr-conformer-smollm2"
Issues = "https://github.com/yourusername/asr-conformer-smollm2/issues"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/configs",
    "/scripts",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Hatch environments
[tool.hatch.envs.default]
installer = "uv"
dependencies = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.hatch.envs.default.scripts]
# Training scripts
train = "python src/train.py {args:}"
train-mac = "python src/train.py +experiments=mac_minimal"

# Development tools
lint = [
    "ruff check src",
    "mypy src",
]
format = [
    "ruff format src",
    "black src",
]

# Docker commands
docker-build = "docker build --platform=linux/amd64 -f Dockerfile -t asr-training:latest ."
docker-build-local = "docker build -f Dockerfile.local -t asr-training:local ."
docker-push = "bash -c 'docker tag asr-training:latest ghcr.io/alexkroman/asr-training:latest && docker push ghcr.io/alexkroman/asr-training:latest'"
docker-local = "docker compose --profile dev up train-dev"

# RunPod commands
create-a20 = 'runpodctl create pod --name "ASR Training A20" --gpuType "NVIDIA RTX A5000" --templateId "29wto61thf"'
sync-to-runpod = """bash -c '
POD_ID=$(runpodctl get pod | grep "ASR Training A20" | head -1 | awk "{print \\$1}")
if [ -z "$POD_ID" ]; then
  echo "Error: No RunPod found with name ASR Training A20"
  exit 1
fi
POD_IP=$(runpodctl get pod $POD_ID | grep -E "^[0-9]+" | awk "{print \\$4}")
echo "Syncing to RunPod $POD_ID at $POD_IP..."
rsync -avz --delete src/ root@$POD_IP:/workspace/src/
rsync -avz --delete configs/ root@$POD_IP:/workspace/configs/
ssh root@$POD_IP "docker cp /workspace/src asr-training:/workspace/ && docker cp /workspace/configs asr-training:/workspace/"
echo "Sync complete!"
'"""

[tool.hatch.envs.cuda]
template = "default"
installer = "uv"
features = ["cuda", "optimized"]

[tool.hatch.envs.cuda.env-vars]
HF_HOME = "/workspace/.cache/huggingface"
HF_DATASETS_CACHE = "/workspace/datasets"
TORCH_HOME = "/workspace/.cache/torch"
HF_HUB_ENABLE_HF_TRANSFER = "1"
HF_DATASETS_DOWNLOAD_WORKERS = "32"
HF_DATASETS_IN_MEMORY_MAX_SIZE = "0"

[tool.hatch.envs.cuda.scripts]
train-prod = "OMP_NUM_THREADS=9 accelerate launch --config_file configs/accelerate/a40.yaml src/train.py +experiments=production"
eval-prod = "python src/train.py +experiments=production eval_checkpoint={args:./outputs/production_model/checkpoint-1000}"

[tool.hatch.envs.mac]
template = "default"

[tool.hatch.envs.mac.env-vars]
PYTORCH_ENABLE_MPS_FALLBACK = "1"
PYTORCH_MPS_HIGH_WATERMARK_RATIO = "0.0"
TOKENIZERS_PARALLELISM = "false"
MPS_ALLOCATOR_POLICY = "default"

# Code quality tools configuration
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true


[tool.ruff]
line-length = 100
target-version = "py38"
extend-exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]